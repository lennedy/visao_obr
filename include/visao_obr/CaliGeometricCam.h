// Generated by gencpp from file visao_obr/CaliGeometricCam.msg
// DO NOT EDIT!


#ifndef VISAO_OBR_MESSAGE_CALIGEOMETRICCAM_H
#define VISAO_OBR_MESSAGE_CALIGEOMETRICCAM_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <visao_obr/CaliRect.h>
#include <visao_obr/CaliCirc.h>

namespace visao_obr
{
template <class ContainerAllocator>
struct CaliGeometricCam_
{
  typedef CaliGeometricCam_<ContainerAllocator> Type;

  CaliGeometricCam_()
    : caliRect()
    , caliCirc()  {
    }
  CaliGeometricCam_(const ContainerAllocator& _alloc)
    : caliRect(_alloc)
    , caliCirc(_alloc)  {
  (void)_alloc;
    }



   typedef  ::visao_obr::CaliRect_<ContainerAllocator>  _caliRect_type;
  _caliRect_type caliRect;

   typedef  ::visao_obr::CaliCirc_<ContainerAllocator>  _caliCirc_type;
  _caliCirc_type caliCirc;





  typedef boost::shared_ptr< ::visao_obr::CaliGeometricCam_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::visao_obr::CaliGeometricCam_<ContainerAllocator> const> ConstPtr;

}; // struct CaliGeometricCam_

typedef ::visao_obr::CaliGeometricCam_<std::allocator<void> > CaliGeometricCam;

typedef boost::shared_ptr< ::visao_obr::CaliGeometricCam > CaliGeometricCamPtr;
typedef boost::shared_ptr< ::visao_obr::CaliGeometricCam const> CaliGeometricCamConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::visao_obr::CaliGeometricCam_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::visao_obr::CaliGeometricCam_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace visao_obr

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'visao_obr': ['/home/lennedy/software/catkin_ws/src/visao_obr/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::visao_obr::CaliGeometricCam_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::visao_obr::CaliGeometricCam_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::visao_obr::CaliGeometricCam_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::visao_obr::CaliGeometricCam_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::visao_obr::CaliGeometricCam_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::visao_obr::CaliGeometricCam_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::visao_obr::CaliGeometricCam_<ContainerAllocator> >
{
  static const char* value()
  {
    return "15f3d84e18aeb4a2382707a1f0dc98b8";
  }

  static const char* value(const ::visao_obr::CaliGeometricCam_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x15f3d84e18aeb4a2ULL;
  static const uint64_t static_value2 = 0x382707a1f0dc98b8ULL;
};

template<class ContainerAllocator>
struct DataType< ::visao_obr::CaliGeometricCam_<ContainerAllocator> >
{
  static const char* value()
  {
    return "visao_obr/CaliGeometricCam";
  }

  static const char* value(const ::visao_obr::CaliGeometricCam_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::visao_obr::CaliGeometricCam_<ContainerAllocator> >
{
  static const char* value()
  {
    return "CaliRect caliRect\n\
CaliCirc caliCirc\n\
\n\
================================================================================\n\
MSG: visao_obr/CaliRect\n\
# Limiar de definição entre branco e preto utilizado pela função treshould do openCV\n\
int32 limiarDefinicao\n\
\n\
\n\
================================================================================\n\
MSG: visao_obr/CaliCirc\n\
# Limiar de definição entre branco e preto utilizado pela função treshould do openCV\n\
int32 limiarCanny\n\
int32 limiarHough\n\
";
  }

  static const char* value(const ::visao_obr::CaliGeometricCam_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::visao_obr::CaliGeometricCam_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.caliRect);
      stream.next(m.caliCirc);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CaliGeometricCam_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::visao_obr::CaliGeometricCam_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::visao_obr::CaliGeometricCam_<ContainerAllocator>& v)
  {
    s << indent << "caliRect: ";
    s << std::endl;
    Printer< ::visao_obr::CaliRect_<ContainerAllocator> >::stream(s, indent + "  ", v.caliRect);
    s << indent << "caliCirc: ";
    s << std::endl;
    Printer< ::visao_obr::CaliCirc_<ContainerAllocator> >::stream(s, indent + "  ", v.caliCirc);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VISAO_OBR_MESSAGE_CALIGEOMETRICCAM_H
